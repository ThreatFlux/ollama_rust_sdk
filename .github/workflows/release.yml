name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            name: ollama-cli-windows-x64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ollama-cli-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ollama-cli-macos-arm64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ollama-cli-linux-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: ollama-cli-linux-musl-x64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --bin ollama-cli
        
    - name: Prepare binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/ollama-cli.exe ${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/ollama-cli ${{ matrix.name }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Verify version
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        # Verify it matches Cargo.toml
        CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d '"' -f 2)
        if [ "$VERSION" != "$CARGO_VERSION" ]; then
          echo "Version mismatch: tag=$VERSION, Cargo.toml=$CARGO_VERSION"
          exit 1
        fi

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Generate changelog
      id: changelog
      run: |
        echo "# Release Notes" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "## Changes since $LAST_TAG" >> RELEASE_NOTES.md
          git log $LAST_TAG..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md
        else
          echo "## Initial Release" >> RELEASE_NOTES.md
          echo "First release of Ollama Rust SDK" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## Features" >> RELEASE_NOTES.md
        echo "- Complete Ollama API coverage" >> RELEASE_NOTES.md
        echo "- Tool/Function calling support" >> RELEASE_NOTES.md
        echo "- Streaming support" >> RELEASE_NOTES.md
        echo "- Async/await with Tokio" >> RELEASE_NOTES.md
        echo "- Comprehensive examples" >> RELEASE_NOTES.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: RELEASE_NOTES.md
        files: artifacts/*/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}