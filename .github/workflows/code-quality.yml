name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: |
        cargo fmt --all -- --check
        
    - name: Report formatting issues
      if: failure()
      run: |
        echo "::error::Code formatting issues detected. Run 'cargo fmt' to fix."
        cargo fmt --all -- --check --verbose

  clippy:
    name: Clippy Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}

    - name: Run clippy (errors)
      run: cargo clippy --all-features --all-targets -- -D warnings

    - name: Run clippy (pedantic)
      continue-on-error: true
      run: cargo clippy --all-features --all-targets -- -W clippy::pedantic

    - name: Run clippy with suggestions
      if: github.event_name == 'pull_request'
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features

  complexity:
    name: Code Complexity
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install scc
      run: |
        wget -q https://github.com/boyter/scc/releases/download/v3.1.0/scc_3.1.0_Linux_x86_64.tar.gz
        tar -xzf scc_3.1.0_Linux_x86_64.tar.gz
        chmod +x scc

    - name: Code complexity analysis
      run: |
        echo "## Code Complexity Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ./scc --complexity --sort complexity src/ >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        echo "## Lines of Code" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ./scc src/ examples/ tests/ >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  unused-deps:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-udeps
      run: cargo install cargo-udeps --locked

    - name: Check for unused dependencies
      run: cargo +nightly udeps --all-features

  msrv:
    name: Minimum Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-msrv
      run: cargo install cargo-msrv

    - name: Check MSRV
      run: |
        cargo msrv verify
        cargo msrv list

  benchmarks:
    name: Benchmark Regression
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        cargo bench --no-run
        cargo bench -- --output-format bencher | tee output.txt
        
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: output.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: false
        comment-on-alert: true
        alert-threshold: '150%'
        comment-always: true
        fail-on-alert: false