name: Security Audit

on:
  push:
    branches: [ main ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [ main ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  schedule:
    # Run audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Install cargo-deny
      run: |
        # Install a specific version that supports newer Cargo.lock formats
        wget https://github.com/EmbarkStudios/cargo-deny/releases/download/0.14.3/cargo-deny-0.14.3-x86_64-unknown-linux-musl.tar.gz
        tar -xzf cargo-deny-0.14.3-x86_64-unknown-linux-musl.tar.gz
        sudo mv cargo-deny-0.14.3-x86_64-unknown-linux-musl/cargo-deny /usr/local/bin/
        sudo chmod +x /usr/local/bin/cargo-deny
        
    - name: Run cargo-deny check
      run: |
        cargo-deny check advisories
        cargo-deny check licenses
        cargo-deny check bans

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-license
      run: cargo install cargo-license

    - name: Check licenses
      run: |
        echo "## License Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cargo license >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Check for problematic licenses, but allow r-efi which is build-only
        PROBLEMATIC=$(cargo license | grep -E "(GPL|AGPL)" | grep -v "r-efi" | grep -v "LGPL-2.1-or-later OR MIT" || true)
        
        if [ -n "$PROBLEMATIC" ]; then
          echo "::error::Found GPL-licensed dependencies: $PROBLEMATIC"
          exit 1
        fi
        
        # Warn about LGPL but don't fail (r-efi is build-time only)
        if cargo license | grep -E "LGPL" | grep -v "r-efi" ; then
          echo "::warning::Found LGPL-licensed dependencies (non-r-efi)"
        fi

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-vet
      run: cargo install cargo-vet

    - name: Initialize cargo-vet
      run: cargo vet init || true

    - name: Run cargo-vet
      run: cargo vet check || true  # Non-blocking for now

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-sbom
      run: cargo install cargo-sbom

    - name: Generate SBOM
      run: |
        cargo sbom > sbom.spdx
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx