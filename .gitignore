# Generated by Cargo
# will have compiled files and executables
/target/
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# RustRover/IntelliJ
.idea/
*.iml
*.ipr
*.iws

# VS Code
.vscode/
*.code-workspace

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Linux
*~
.directory
.Trash-*

# Vim
*.swp
*.swo
*.swn
*.vim

# Emacs
*~
\#*\#
.\#*

# Python (for any helper scripts)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/

# Documentation build artifacts
/doc/
/docs/_build/
/docs/_site/

# Test coverage
*.profraw
*.profdata
/coverage/
lcov.info
*.lcov

# Benchmark results
/benches/target/
/criterion/

# Environment files
.env
.env.local
.env.*.local

# Temporary files
*.tmp
*.temp
*.log
*.pid
*.seed

# Build artifacts
*.exe
*.dll
*.so
*.dylib
*.a
*.lib

# Package files
*.tar.gz
*.zip
*.deb
*.rpm

# Ollama specific
.ollama/
ollama_models/

# Local configuration
config.local.toml
settings.local.json

# Test artifacts
test_output/
test_results/

# Cached dependencies
.cargo/
!.cargo/config.toml

# Generated documentation
rustdoc/

# Security audit files
audit.toml.local

# SBOM files (keep only versioned ones)
sbom.*.spdx
!sbom.spdx

# Release artifacts
/dist/
/release/
/artifacts/

# Nix
result
result-*

# direnv
.envrc
.direnv/